#!/bin/bash

# Basic Linux Hardening Script with Logging

# Log file
LOG_FILE="/var/log/hardening.log"

# Function to log messages
log_message() {
    local message="$1"
    echo "$message"
    echo "$(date +"%Y-%m-%d %T") - $message" >> "$LOG_FILE"
}

# Function to log step status
log_step_status() {
    local step="$1"
    local exit_code="$2"
    if [ "$exit_code" -eq 0 ]; then
        log_message "Step '$step' completed successfully."
    else
        log_message "Step '$step' failed with exit code $exit_code."
    fi
}

# Ensure nodev, nosuid, noexec options on /var/tmp
log_message "****Ensure nodev, nosuid, noexec options on /var/tmp  ****"
if [ -e "/etc/fstab" ]; then
    if grep -qE "^\s*[^#].*\s+/var/tmp\s+" /etc/fstab; then
        # Add nodev option if not already set
        if ! grep -qE "^\s*[^#].*\s+/var/tmp\s+.*nodev" /etc/fstab; then
            sed -i '/\/var\/tmp/ s/defaults/&',nodev'/g' /etc/fstab
            log_step_status "Adding nodev option to /var/tmp in /etc/fstab" $?
        else
            log_message "/var/tmp already configured with nodev option in /etc/fstab"
        fi
        if ! grep -qE "^\s*[^#].*\s+/var/tmp\s+.*nosuid" /etc/fstab; then
            sed -i '/\/var\/tmp/ s/defaults/&',nosuid'/g' /etc/fstab
            log_step_status "Adding nosuid option to /var/tmp in /etc/fstab" $?
        else
            log_message "/var/tmp already configured with nosuid option in /etc/fstab"
        fi
        if ! grep -qE "^\s*[^#].*\s+/var/tmp\s+.*noexec" /etc/fstab; then
            sed -i '/\/var\/tmp/ s/defaults/&',noexec'/g' /etc/fstab
            log_step_status "Adding noexec option to /var/tmp in /etc/fstab" $?
        else
            log_message "/var/tmp already configured with noexec option in /etc/fstab"
        fi
    else
        log_message "/var/tmp entry not found in /etc/fstab"
    fi
else
    log_message "/etc/fstab not found"
fi
echo "Fstab for /var/tmp check complete. See $LOG_FILE for details."

# Ensure nodev option on /home
log_message "****Ensure nodev option on /home  ****"
if [ -e "/etc/fstab" ]; then
    if grep -qE "^\s*[^#].*\s+/home\s+" /etc/fstab; then
        # Add nodev option if not already set
        if ! grep -qE "^\s*[^#].*\s+/home\s+.*nodev" /etc/fstab; then
            sed -i '/\/home/ s/defaults/&',nodev'/g' /etc/fstab
            log_step_status "Adding nodev option to /home in /etc/fstab" $?
        else
            log_message "/home already configured with nodev option in /etc/fstab"
        fi
    else
        log_message "/home entry not found in /etc/fstab"
    fi
else
    log_message "/home not found"
fi
echo "Fstab for /home check complete. See $LOG_FILE for details."

# Check if * hard core 0 is present in limits.conf
log_message "****Ensure core dumps are restricted (* hard core 0 is present in limits.conf)  ****"
if ! grep -qE "^\s*\*\s+hard\s+core\s+0\s*$" /etc/security/limits.conf; then
    log_message "Adding '* hard core 0' in limits.conf."
    #echo "Adding '* hard core 0' in limits.conf."
    echo "* hard core 0" >> /etc/security/limits.conf
    log_step_status "'* hard core 0' added to limits.conf" $?
    
else
    log_message "'* hard core 0' is present in limits.conf"
    #echo "'* hard core 0' is present in limits.conf"
fi
echo "limits.conf check complete. See $LOG_FILE for details."


# Ensure the OH Warning Message is present in /etc/motd with formatting
log_message "**** Command Line Warning Banners is present in /etc/motd with formatting ****"
MESSAGE="
***********************************************
*                                             *
*  Welcome to our system.                    *
*  Please remember to follow security        *
*  guidelines.                               *
*                                             *
***********************************************
"

# Check if the Warning Message is already present in /etc/motd
if ! grep -qF "$MESSAGE" /etc/motd; then
    log_message "Adding OH Warning Message to /etc/motd"
    echo "$MESSAGE" | sudo tee -a /etc/motd >/dev/null
    # Check if the Warning Message was added successfully
    if grep -qF "$MESSAGE" /etc/motd; then
        echo "OH Warning Message added to /etc/motd"
        log_step_status "Adding OH Warning Message to /etc/motd" $?
    else
     #   echo "Adding OH Warning Message to /etc/motd Failed"
        log_step_status "Adding OH Warning Message to /etc/motd" $?
    fi
else
      #  echo "OH Warning Message is already present in /etc/motd"
        log_message "OH Warning Message is already present in /etc/motd"
fi
echo "OH Warning Message check complete. See $LOG_FILE for details."


# Ensure ntp is configured
log_message "**** Ensure ntp is configured ****"
log_message "Add restrict lines in /etc/ntp.conf"
# Path to ntp.conf
NTP_CONF="/etc/ntp.conf"

# Lines to add or edit in ntp.conf
RESTRICT_LINE1="restrict -4 default kod nomodify notrap nopeer noquery"
RESTRICT_LINE2="restrict -6 default kod nomodify notrap nopeer noquery"

# Function to add or edit restrict lines in ntp.conf
add_or_edit_restrict_lines() {
    local line1="$1"
    local line2="$2"
    if grep -q "^$line1" "$NTP_CONF"; then
        echo "Line 1 already exists in ntp.conf"
    else
        echo "$line1" | sudo tee -a "$NTP_CONF" >/dev/null
        echo "Line 1 added to ntp.conf"

    fi
    if grep -q "^$line2" "$NTP_CONF"; then
        echo "Line 2 already exists in ntp.conf"
    else
        echo "$line2" | sudo tee -a "$NTP_CONF" >/dev/null
        echo "Line 2 added to ntp.conf"
    fi
}
# Check if ntp.conf exists
if [ -f "$NTP_CONF" ]; then
    #echo "ntp.conf exists"
    log_message "ntp.conf exists"
    # Add or edit restrict lines
    add_or_edit_restrict_lines "$RESTRICT_LINE1" "$RESTRICT_LINE2"
    log_step_status "Adding restrict lines in /etc/ntp.conf" $?
else
    #echo "/etc/ntp.conf does not exist."
    log_message "/etc/ntp.conf does not exist." 
fi

log_message "Add or edit the OPTIONS in /etc/sysconfig/ntpd"
# Path to ntpd configuration file
NTPD_CONF="/etc/sysconfig/ntpd"

# Function to add or edit options in ntpd configuration file
add_or_edit_options() {
    local option="$1"
    local value="$2"
    if grep -qE "^$option=" "$NTPD_CONF"; then
        # Edit option if it exists
        sudo sed -i "s/^$option=.*/$option=\"$value\"/" "$NTPD_CONF"
        echo "Edited $option to $value in $NTPD_CONF"
    else
        # Add option if it doesn't exist
        echo "$option=\"$value\"" | sudo tee -a "$NTPD_CONF" >/dev/null
        echo "Added $option=$value to $NTPD_CONF"
    fi
}

# Function to restart ntpd service and get its status
restart_service() {
    sudo systemctl restart $1
    if systemctl is-active --quiet $1; then
     #   echo "ntpd service restarted successfully"
        log_message "$1 service restarted successfully"
    else
      #  echo "Failed to restart ntpd service"
        log_message "Failed to restart $1 service"
    fi
}

# Check if ntpd configuration file exists
if [ -f "$NTPD_CONF" ]; then
    #echo "ntpd configuration file exists"
    log_message "ntpd configuration file exists"
    
    # Add or edit options
    add_or_edit_options "OPTIONS" "-u ntp:ntp"
    log_step_status "Add or edit the OPTIONS in /etc/sysconfig/ntpd" $?
    # Restart ntpd service and get its status
    restart_service ntpd
else
    #echo "ntpd configuration file does not exist"
    log_message "ntpd configuration file does not exist"
fi

# Ensure X Window System is not installed
log_message "**** Ensure X Window System is not installed ****"
# Remove X Windows System Packages
yum -y remove xorg-x11* >> "$LOG_FILE" 2>&1
log_step_status "Remove X Windows System Packages" $? 

#Disable X-11 Forwarding
SSH_CONFIG="/etc/ssh/sshd_config"
log_message "Disable X-11 Forwarding"
if grep -qE "^\s*X11Forwarding\s+" "$SSH_CONFIG"; then
    if grep -qE "^\s*X11Forwarding\s+yes" "$SSH_CONFIG"; then
        log_message "X11Forwarding is set to yes. Modifying sshd_config..."
        # Modify sshd_config to set X11Forwarding to no
        sudo sed -i 's/^\s*X11Forwarding\s*yes/X11Forwarding no/' "$SSH_CONFIG"
        log_step_status "sshd_config updated: X11Forwarding set to no." $?
        # Restart sshd service
        restart_service sshd
    else
        log_message "X11Forwarding is already set to no in sshd_config."
    fi
else       
    log_message " X11Forwarding no is missing in $SSH_CONFIG. Adding..."
    echo "X11Forwarding no" | sudo tee -a "$SSH_CONFIG" >/dev/null
    log_step_status "Added X11Forwarding no to sshd_config" $?
    # Restart sshd service
    restart_service sshd
fi

# Ensure NFS and RPC daemons are not enabled
log_message "****Ensure NFS and RPC daemons are not enabled ****"
# List of services to disable
SERVICES=("nfs" "nfs-server" "rpcbind" "rpcbind.socket")

# Loop through the list of services and disable them
for service in "${SERVICES[@]}"; do
    sudo systemctl disable "$service"
    log_step_status "Service $service" $?
done


### Function to search for and replace or add net parameters in sysctl.conf
search_and_replace_or_add() {
    local file="$1"
    local parameter="$2"
    local value="$3"

    # Check if parameter exists
    if grep -qE "^\s*$parameter\s*=" "$file"; then
        # Replace existing parameter
        sudo sed -i "s/^\s*$parameter\s*=.*/$parameter = $value/" "$file"
        log_message "$parameter set to $value in $file"
    else
        # Add parameter if not found
        echo "$parameter = $value" | sudo tee -a "$file" >/dev/null
        log_message "Added $parameter = $value to $file"
    fi
}


# Ensure net parameters are added in /etc/sysctl.conf 
log_message "Ensure net parameters are added in /etc/sysctl.conf "
# List of net parameters and their values
NET_PARAMETERS=(
    "net.ipv4.ip_forward=0"
    "net.ipv4.conf.all.send_redirects=0"
    "net.ipv4.conf.default.send_redirects=0"
    "net.ipv4.conf.all.accept_redirects=0"
    "net.ipv4.conf.default.accept_redirects=0"
    "net.ipv4.conf.all.secure_redirects=0"
    "net.ipv4.conf.default.secure_redirects=0"
    "net.ipv4.conf.all.log_martians=1"
    "net.ipv4.conf.default.log_martians=1"
    "net.ipv4.tcp_syncookies=1"
)

# Search and replace or add each parameter in /etc/sysctl.conf
for param_value in "${NET_PARAMETERS[@]}"; do
    IFS='=' read -r parameter value <<< "$param_value"
    search_and_replace_or_add "/etc/sysctl.conf" "$parameter" "$value"
    log_step_status " search_and_replace_or_add net parameter $parameter in /etc/sysctl.conf" $?
done

# Search and replace in /etc/sysctl.d/*
# Search and replace or add each parameter in /etc/sysctl.d/*
for file in /etc/sysctl.d/*; do
    for param_value in "${NET_PARAMETERS[@]}"; do
        IFS='=' read -r parameter value <<< "$param_value"
        search_and_replace_or_add "$file" "$parameter" "$value"
        log_step_status "search_and_replace_ip_forward in $file" $? 

    done
done

# Run Commands to set the active kernel parameters
log_message " Run Commands to set the active kernel parameters"
for param_value in "${NET_PARAMETERS[@]}"; do
    sysctl -w $param_value
    log_step_status " sysctl -w $param_value" $?
done

#sysctl -w net.ipv4.ip_forward=0
#sysctl -w net.ipv4.route.flush=1
#sysctl -w net.ipv4.conf.all.send_redirects=0
#sysctl -w net.ipv4.conf.default.send_redirects=0
#    sysctl -w net.ipv4.conf.all.accept_redirects=0
##    sysctl -w net.ipv4.conf.default.accept_redirects=0
#    sysctl -w net.ipv4.conf.all.secure_redirects=0
#    sysctl -w net.ipv4.conf.default.secure_redirects=0










# Ensure nodev option on /home
log_message "****Ensure nodev option on /home  ****"
if [ -e "/etc/fstab" ]; then
    if grep -qE "^\s*[^#].*\s+/home\s+" /etc/fstab; then
        # Add nodev option if not already set
        if ! grep -qE "^\s*[^#].*\s+/home\s+.*nodev" /etc/fstab; then
            sed -i '/\/home/ s/defaults/&',nodev'/g' /etc/fstab
            log_step_status "Adding nodev option to /home in /etc/fstab" $?
        else
            log_message "/home already configured with nodev option in /etc/fstab"
        fi
    else
        log_message "/home entry not found in /etc/fstab"
    fi
else
    log_message "/home not found"
fi
echo "Fstab for /home check complete. See $LOG_FILE for details."
























************************************************************************************************

# Update package repositories and installed packages
log_message "Updating package repositories and installed packages..."
sudo apt update && sudo apt upgrade -y
log_step_status "Update" $?

# Enable firewall (UFW) and allow necessary ports
log_message "Configuring firewall (UFW)..."
sudo apt install ufw -y
sudo ufw allow OpenSSH  # Allow SSH access
sudo ufw enable
log_step_status "Firewall" $?

# Disable root login via SSH
log_message "Disabling root login via SSH..."
sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
sudo service ssh restart
log_step_status "Root Login" $?

# Disable password authentication and use SSH keys only
log_message "Disabling password authentication and requiring SSH keys only..."
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
sudo service ssh restart
log_step_status "Password Auth" $?

# Set up automatic security updates
log_message "Setting up automatic security updates..."
sudo apt install unattended-upgrades -y
sudo dpkg-reconfigure --priority=low unattended-upgrades
log_step_status "Auto Updates" $?

# Install and configure fail2ban for intrusion prevention
log_message "Installing fail2ban for intrusion prevention..."
sudo apt install fail2ban -y
sudo cp /etc/fail2ban/jail.{conf,local}
sudo systemctl restart fail2ban
log_step_status "Fail2Ban" $?

# Limit user access
log_message "Limiting user access..."
# Example: Create a new user and disable root login
# sudo adduser newuser
# sudo usermod -aG sudo newuser
# sudo passwd -l root
log_step_status "User Access" $?

# Configure syslog to forward logs to a centralized server (optional)
# log_message "Configuring syslog to forward logs to a centralized server..."
# Edit /etc/rsyslog.conf to include appropriate configuration for forwarding logs
# log_step_status "Syslog" $?

echo "Basic system hardening complete. See $LOG_FILE for details."
