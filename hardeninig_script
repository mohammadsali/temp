#!/bin/bash

# Basic Linux Hardening Script with Logging

# Log file
LOG_FILE="/var/log/hardening.log"

# Function to log messages
log_message() {
    local message="$1"
    echo "$(date +"%Y-%m-%d %T") - $message" >> "$LOG_FILE"
}

# Function to log step status
log_step_status() {
    local step="$1"
    local exit_code="$2"
    if [ "$exit_code" -eq 0 ]; then
        log_message "Step '$step' completed successfully."
    else
        log_message "Step '$step' failed with exit code $exit_code."
    fi
}

# Ensure nodev, nosuid, noexec options on /var/tmp
log_message "****Ensure nodev, nosuid, noexec options on /var/tmp  ****"
if [ -e "/etc/fstab" ]; then
    if grep -qE "^\s*[^#].*\s+/var/tmp\s+" /etc/fstab; then
        # Add nodev option if not already set
        if ! grep -qE "^\s*[^#].*\s+/var/tmp\s+.*nodev" /etc/fstab; then
            sed -i '/\/var\/tmp/ s/defaults/&',nodev'/g' /etc/fstab
            log_step_status "Adding nodev option to /var/tmp in /etc/fstab" $?
        else
            log_message "/var/tmp already configured with nodev option in /etc/fstab"
        fi
        if ! grep -qE "^\s*[^#].*\s+/var/tmp\s+.*nosuid" /etc/fstab; then
            sed -i '/\/var\/tmp/ s/defaults/&',nosuid'/g' /etc/fstab
            log_step_status "Adding nosuid option to /var/tmp in /etc/fstab" $?
        else
            log_message "/var/tmp already configured with nosuid option in /etc/fstab"
        fi
        if ! grep -qE "^\s*[^#].*\s+/var/tmp\s+.*noexec" /etc/fstab; then
            sed -i '/\/var\/tmp/ s/defaults/&',noexec'/g' /etc/fstab
            log_step_status "Adding noexec option to /var/tmp in /etc/fstab" $?
        else
            log_message "/var/tmp already configured with noexec option in /etc/fstab"
        fi
    else
        log_message "/var/tmp entry not found in /etc/fstab"
    fi
else
    log_message "/etc/fstab not found"
fi
echo "Fstab for /var/tmp check complete. See $LOG_FILE for details."

# Ensure nodev option on /home
log_message "****Ensure nodev option on /home  ****"
if [ -e "/etc/fstab" ]; then
    if grep -qE "^\s*[^#].*\s+/home\s+" /etc/fstab; then
        # Add nodev option if not already set
        if ! grep -qE "^\s*[^#].*\s+/home\s+.*nodev" /etc/fstab; then
            sed -i '/\/home/ s/defaults/&',nodev'/g' /etc/fstab
            log_step_status "Adding nodev option to /home in /etc/fstab" $?
        else
            log_message "/home already configured with nodev option in /etc/fstab"
        fi
    else
        log_message "/home entry not found in /etc/fstab"
    fi
else
    log_message "/home not found"
fi
echo "Fstab for /home check complete. See $LOG_FILE for details."

# Check if * hard core 0 is present in limits.conf
log_message "****Ensure core dumps are restricted (* hard core 0 is present in limits.conf)  ****"
if ! grep -qE "^\s*\*\s+hard\s+core\s+0\s*$" /etc/security/limits.conf; then
    log_message "Adding '* hard core 0' in limits.conf."
    echo "Adding '* hard core 0' in limits.conf."
    echo "* hard core 0" >> /etc/security/limits.conf
    log_step_status "'* hard core 0' added to limits.conf" $?
    
else
    log_message "'* hard core 0' is present in limits.conf"
    echo "'* hard core 0' is present in limits.conf"
fi
echo "limits.conf check complete. See $LOG_FILE for details."


# Ensure the OH Warning Message is present in /etc/motd with formatting
log_message "**** Command Line Warning Banners is present in /etc/motd with formatting ****"
MESSAGE="
***********************************************
*                                             *
*  Welcome to our system.                    *
*  Please remember to follow security        *
*  guidelines.                               *
*                                             *
***********************************************
"

# Check if the Warning Message is already present in /etc/motd
if ! grep -qF "$MESSAGE" /etc/motd; then
    log_message "Adding OH Warning Message to /etc/motd"
    echo "$MESSAGE" | sudo tee -a /etc/motd >/dev/null
    # Check if the Warning Message was added successfully
    if grep -qF "$MESSAGE" /etc/motd; then
        echo "OH Warning Message added to /etc/motd"
        log_step_status "Adding OH Warning Message to /etc/motd" $?
    else
        echo "log_step_status "Adding OH Warning Message to /etc/motd Failed"
        log_step_status "Adding OH Warning Message to /etc/motd" $?
    fi
else
        echo "OH Warning Message is already present in /etc/motd"
fi
echo "OH Warning Message check complete. See $LOG_FILE for details."


# Ensure ntp is configured
log_message "**** Ensure ntp is configured ****"









# Update package repositories and installed packages
log_message "Updating package repositories and installed packages..."
sudo apt update && sudo apt upgrade -y
log_step_status "Update" $?

# Enable firewall (UFW) and allow necessary ports
log_message "Configuring firewall (UFW)..."
sudo apt install ufw -y
sudo ufw allow OpenSSH  # Allow SSH access
sudo ufw enable
log_step_status "Firewall" $?

# Disable root login via SSH
log_message "Disabling root login via SSH..."
sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
sudo service ssh restart
log_step_status "Root Login" $?

# Disable password authentication and use SSH keys only
log_message "Disabling password authentication and requiring SSH keys only..."
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
sudo service ssh restart
log_step_status "Password Auth" $?

# Set up automatic security updates
log_message "Setting up automatic security updates..."
sudo apt install unattended-upgrades -y
sudo dpkg-reconfigure --priority=low unattended-upgrades
log_step_status "Auto Updates" $?

# Install and configure fail2ban for intrusion prevention
log_message "Installing fail2ban for intrusion prevention..."
sudo apt install fail2ban -y
sudo cp /etc/fail2ban/jail.{conf,local}
sudo systemctl restart fail2ban
log_step_status "Fail2Ban" $?

# Limit user access
log_message "Limiting user access..."
# Example: Create a new user and disable root login
# sudo adduser newuser
# sudo usermod -aG sudo newuser
# sudo passwd -l root
log_step_status "User Access" $?

# Configure syslog to forward logs to a centralized server (optional)
# log_message "Configuring syslog to forward logs to a centralized server..."
# Edit /etc/rsyslog.conf to include appropriate configuration for forwarding logs
# log_step_status "Syslog" $?

echo "Basic system hardening complete. See $LOG_FILE for details."
